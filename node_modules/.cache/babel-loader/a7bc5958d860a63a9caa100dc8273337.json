{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function useTransactionsByEmployee() {\n  _s();\n\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [transactionsByEmployee, setTransactionsByEmployee] = useState(null);\n  const fetchById = useCallback(async employeeId => {\n    const data = await fetchWithCache(\"transactionsByEmployee\", {\n      employeeId\n    });\n    setTransactionsByEmployee(prevTransactions => {\n      if (!prevTransactions) return data !== null && data !== void 0 ? data : [];\n      return data ? data.map(transaction => prevTransactions.find(t => t.id === transaction.id) || transaction) : prevTransactions;\n    });\n  }, [fetchWithCache]);\n  const invalidateData = useCallback(() => {\n    setTransactionsByEmployee(null);\n  }, []);\n  return {\n    data: transactionsByEmployee,\n    loading,\n    fetchById,\n    updateTransactionApproval\n  };\n}\n\n_s(useTransactionsByEmployee, \"kKvyfBKX5wcdmUqML83LxPYcyfE=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","useTransactionsByEmployee","fetchWithCache","loading","transactionsByEmployee","setTransactionsByEmployee","fetchById","employeeId","data","prevTransactions","map","transaction","find","t","id","invalidateData","updateTransactionApproval"],"sources":["D:/Assessments/Ramp/ramp-fe-challenge/src/hooks/useTransactionsByEmployee.ts"],"sourcesContent":["import { useCallback, useState } from \"react\"\nimport { RequestByEmployeeParams, Transaction } from \"../utils/types\"\nimport { TransactionsByEmployeeResult } from \"./types\"\nimport { useCustomFetch } from \"./useCustomFetch\"\n\nexport function useTransactionsByEmployee(): TransactionsByEmployeeResult {\n  const { fetchWithCache, loading } = useCustomFetch()\n  const [transactionsByEmployee, setTransactionsByEmployee] = useState<Transaction[] | null>(null)\n\n  const fetchById = useCallback(\n    async (employeeId: string) => {\n      const data = await fetchWithCache<Transaction[], RequestByEmployeeParams>(\n        \"transactionsByEmployee\",\n        {\n          employeeId,\n        }\n      )\n\n      setTransactionsByEmployee((prevTransactions) => {\n        if (!prevTransactions) return data ?? [];\n\n        return data\n          ? data.map(\n              (transaction) => prevTransactions.find((t) => t.id === transaction.id) || transaction\n            )\n          : prevTransactions\n      })\n    },\n    [fetchWithCache]\n  )\n\n  const invalidateData = useCallback(() => {\n    setTransactionsByEmployee(null)\n  }, [])\n\n  return { data: transactionsByEmployee, loading, fetchById, updateTransactionApproval }\n}\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAGA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,OAAO,SAASC,yBAAT,GAAmE;EAAA;;EACxE,MAAM;IAAEC,cAAF;IAAkBC;EAAlB,IAA8BH,cAAc,EAAlD;EACA,MAAM,CAACI,sBAAD,EAAyBC,yBAAzB,IAAsDN,QAAQ,CAAuB,IAAvB,CAApE;EAEA,MAAMO,SAAS,GAAGR,WAAW,CAC3B,MAAOS,UAAP,IAA8B;IAC5B,MAAMC,IAAI,GAAG,MAAMN,cAAc,CAC/B,wBAD+B,EAE/B;MACEK;IADF,CAF+B,CAAjC;IAOAF,yBAAyB,CAAEI,gBAAD,IAAsB;MAC9C,IAAI,CAACA,gBAAL,EAAuB,OAAOD,IAAP,aAAOA,IAAP,cAAOA,IAAP,GAAe,EAAf;MAEvB,OAAOA,IAAI,GACPA,IAAI,CAACE,GAAL,CACGC,WAAD,IAAiBF,gBAAgB,CAACG,IAAjB,CAAuBC,CAAD,IAAOA,CAAC,CAACC,EAAF,KAASH,WAAW,CAACG,EAAlD,KAAyDH,WAD5E,CADO,GAIPF,gBAJJ;IAKD,CARwB,CAAzB;EASD,CAlB0B,EAmB3B,CAACP,cAAD,CAnB2B,CAA7B;EAsBA,MAAMa,cAAc,GAAGjB,WAAW,CAAC,MAAM;IACvCO,yBAAyB,CAAC,IAAD,CAAzB;EACD,CAFiC,EAE/B,EAF+B,CAAlC;EAIA,OAAO;IAAEG,IAAI,EAAEJ,sBAAR;IAAgCD,OAAhC;IAAyCG,SAAzC;IAAoDU;EAApD,CAAP;AACD;;GA/Bef,yB;UACsBD,c"},"metadata":{},"sourceType":"module"}