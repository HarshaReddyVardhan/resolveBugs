{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState, useEffect } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function useTransactionsByEmployee() {\n  _s();\n\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [transactionsByEmployee, setTransactionsByEmployee] = useState(null); // ✅ Restore persisted transactions from localStorage on load\n\n  useEffect(() => {\n    const savedTransactions = localStorage.getItem(\"transactionsByEmployee\");\n\n    if (savedTransactions) {\n      setTransactionsByEmployee(JSON.parse(savedTransactions));\n    }\n  }, []);\n  const fetchById = useCallback(async employeeId => {\n    const data = await fetchWithCache(\"transactionsByEmployee\", {\n      employeeId\n    });\n    setTransactionsByEmployee(prevTransactions => {\n      if (!prevTransactions) return data !== null && data !== void 0 ? data : [];\n      return data.map(transaction => {\n        const updatedTransaction = prevTransactions.find(t => t.id === transaction.id);\n        return updatedTransaction ? updatedTransaction : transaction;\n      });\n    });\n  }, [fetchWithCache]);\n  const invalidateData = useCallback(() => {\n    setTransactionsByEmployee(null);\n  }, []);\n\n  const updateTransactionApproval = (transactionId, newValue) => {\n    setTransactionsByEmployee(prevTransactions => {\n      if (!prevTransactions) return null;\n      const updatedTransactions = prevTransactions.map(t => t.id === transactionId ? { ...t,\n        approved: newValue\n      } : t); // ✅ Persist transaction updates in localStorage to maintain state across filters\n\n      localStorage.setItem(\"transactionsByEmployee\", JSON.stringify(updatedTransactions));\n      return updatedTransactions;\n    });\n  };\n\n  return {\n    data: transactionsByEmployee,\n    loading,\n    fetchById,\n    invalidateData,\n    updateTransactionApproval\n  };\n}\n\n_s(useTransactionsByEmployee, \"pL9M2xRv784lqROt33lSOTm3pA0=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useEffect","useCustomFetch","useTransactionsByEmployee","fetchWithCache","loading","transactionsByEmployee","setTransactionsByEmployee","savedTransactions","localStorage","getItem","JSON","parse","fetchById","employeeId","data","prevTransactions","map","transaction","updatedTransaction","find","t","id","invalidateData","updateTransactionApproval","transactionId","newValue","updatedTransactions","approved","setItem","stringify"],"sources":["D:/Assessments/Ramp/ramp-fe-challenge/src/hooks/useTransactionsByEmployee.ts"],"sourcesContent":["import { useCallback, useState, useEffect } from \"react\"\nimport { RequestByEmployeeParams, Transaction } from \"../utils/types\"\nimport { TransactionsByEmployeeResult } from \"./types\"\nimport { useCustomFetch } from \"./useCustomFetch\"\n\nexport function useTransactionsByEmployee(): TransactionsByEmployeeResult {\n  const { fetchWithCache, loading } = useCustomFetch()\n  const [transactionsByEmployee, setTransactionsByEmployee] = useState<Transaction[] | null>(null)\n\n  // ✅ Restore persisted transactions from localStorage on load\n  useEffect(() => {\n    const savedTransactions = localStorage.getItem(\"transactionsByEmployee\")\n    if (savedTransactions) {\n      setTransactionsByEmployee(JSON.parse(savedTransactions))\n    }\n  }, [])\n\n  const fetchById = useCallback(\n    async (employeeId: string) => {\n      const data = await fetchWithCache<Transaction[], RequestByEmployeeParams>(\n        \"transactionsByEmployee\",\n        { employeeId }\n      )\n\n      setTransactionsByEmployee((prevTransactions) => {\n        if (!prevTransactions) return data ?? []\n\n        return data.map((transaction) => {\n          const updatedTransaction = prevTransactions.find((t) => t.id === transaction.id)\n          return updatedTransaction ? updatedTransaction : transaction\n        })\n      })\n    },\n    [fetchWithCache]\n  )\n\n  const invalidateData = useCallback(() => {\n    setTransactionsByEmployee(null)\n  }, [])\n\n  const updateTransactionApproval = (transactionId: string, newValue: boolean) => {\n    setTransactionsByEmployee((prevTransactions) => {\n      if (!prevTransactions) return null\n\n      const updatedTransactions = prevTransactions.map((t) =>\n        t.id === transactionId ? { ...t, approved: newValue } : t\n      )\n\n      // ✅ Persist transaction updates in localStorage to maintain state across filters\n      localStorage.setItem(\"transactionsByEmployee\", JSON.stringify(updatedTransactions))\n\n      return updatedTransactions\n    })\n  }\n\n  return { data: transactionsByEmployee, loading, fetchById, invalidateData, updateTransactionApproval }\n}\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,EAAgCC,SAAhC,QAAiD,OAAjD;AAGA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,OAAO,SAASC,yBAAT,GAAmE;EAAA;;EACxE,MAAM;IAAEC,cAAF;IAAkBC;EAAlB,IAA8BH,cAAc,EAAlD;EACA,MAAM,CAACI,sBAAD,EAAyBC,yBAAzB,IAAsDP,QAAQ,CAAuB,IAAvB,CAApE,CAFwE,CAIxE;;EACAC,SAAS,CAAC,MAAM;IACd,MAAMO,iBAAiB,GAAGC,YAAY,CAACC,OAAb,CAAqB,wBAArB,CAA1B;;IACA,IAAIF,iBAAJ,EAAuB;MACrBD,yBAAyB,CAACI,IAAI,CAACC,KAAL,CAAWJ,iBAAX,CAAD,CAAzB;IACD;EACF,CALQ,EAKN,EALM,CAAT;EAOA,MAAMK,SAAS,GAAGd,WAAW,CAC3B,MAAOe,UAAP,IAA8B;IAC5B,MAAMC,IAAI,GAAG,MAAMX,cAAc,CAC/B,wBAD+B,EAE/B;MAAEU;IAAF,CAF+B,CAAjC;IAKAP,yBAAyB,CAAES,gBAAD,IAAsB;MAC9C,IAAI,CAACA,gBAAL,EAAuB,OAAOD,IAAP,aAAOA,IAAP,cAAOA,IAAP,GAAe,EAAf;MAEvB,OAAOA,IAAI,CAACE,GAAL,CAAUC,WAAD,IAAiB;QAC/B,MAAMC,kBAAkB,GAAGH,gBAAgB,CAACI,IAAjB,CAAuBC,CAAD,IAAOA,CAAC,CAACC,EAAF,KAASJ,WAAW,CAACI,EAAlD,CAA3B;QACA,OAAOH,kBAAkB,GAAGA,kBAAH,GAAwBD,WAAjD;MACD,CAHM,CAAP;IAID,CAPwB,CAAzB;EAQD,CAf0B,EAgB3B,CAACd,cAAD,CAhB2B,CAA7B;EAmBA,MAAMmB,cAAc,GAAGxB,WAAW,CAAC,MAAM;IACvCQ,yBAAyB,CAAC,IAAD,CAAzB;EACD,CAFiC,EAE/B,EAF+B,CAAlC;;EAIA,MAAMiB,yBAAyB,GAAG,CAACC,aAAD,EAAwBC,QAAxB,KAA8C;IAC9EnB,yBAAyB,CAAES,gBAAD,IAAsB;MAC9C,IAAI,CAACA,gBAAL,EAAuB,OAAO,IAAP;MAEvB,MAAMW,mBAAmB,GAAGX,gBAAgB,CAACC,GAAjB,CAAsBI,CAAD,IAC/CA,CAAC,CAACC,EAAF,KAASG,aAAT,GAAyB,EAAE,GAAGJ,CAAL;QAAQO,QAAQ,EAAEF;MAAlB,CAAzB,GAAwDL,CAD9B,CAA5B,CAH8C,CAO9C;;MACAZ,YAAY,CAACoB,OAAb,CAAqB,wBAArB,EAA+ClB,IAAI,CAACmB,SAAL,CAAeH,mBAAf,CAA/C;MAEA,OAAOA,mBAAP;IACD,CAXwB,CAAzB;EAYD,CAbD;;EAeA,OAAO;IAAEZ,IAAI,EAAET,sBAAR;IAAgCD,OAAhC;IAAyCQ,SAAzC;IAAoDU,cAApD;IAAoEC;EAApE,CAAP;AACD;;GAnDerB,yB;UACsBD,c"},"metadata":{},"sourceType":"module"}